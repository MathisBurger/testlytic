{"version":3,"sources":["components/Snackbar.tsx","components/IO-Card.tsx","services/Websocket.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Snackbar","setTimeout","ReactDOM","render","document","getElementById","style","background","this","props","color","className","message","React","Component","IOCard","state","inputType","undefined","value","locale","onChange","valueChanger","e","plainText","colors","width","height","outerBox","borderRadius","overflow","placeholder","JSON","parse","viewOnly","heading","onClick","sender","size","setState","target","getJSONInput","Websocket","url","errorHandler","websocket","URLChecker","w3cwebsocket","onerror","name","includes","msg","send","App","inputText","outputText","connected","changeInputValue","bind","sendMessage","messageReciver","err","currentTarget","readyState","event","data","waiting","ws","openConnection","onmessage","close","val","type","closeConnection","borderColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.4ff6fb04.chunk.js","sourcesContent":["import React from \"react\";\nimport {SnackbarProps} from \"../../typings/components/Snackbar\";\nimport ReactDOM from \"react-dom\";\n\nexport class Snackbar extends React.Component<SnackbarProps, any> {\n\n    componentDidMount() {\n        setTimeout(\n            () => ReactDOM.render(<div />, document.getElementById(\"snackbar\")),\n            1000);\n    }\n\n    render() {\n        return (\n            <div style={{background: this.props.color}} className=\"snackbar\">\n                {this.props.message}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n// @ts-ignore\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport {IOCardProps, IOCardState} from \"../../typings/components/IO-Card\";\nimport ReactDOM from \"react-dom\";\nimport {Snackbar} from \"./Snackbar\";\n\nexport class IOCard extends React.Component<IOCardProps, IOCardState> {\n\n    state: IOCardState = {\n      inputType: \"JSON\"\n    };\n\n    constructor(props: IOCardProps) {\n        super(props);\n        if (props.inputType !== undefined) {\n            this.state.inputType = props.inputType;\n        }\n    }\n\n    // Checks if the value from the props is an empty string.\n    // If not, it sets the JSONInout to onlyView and sets the value\n    // as placeholder in the input\n    getJSONInput(): JSX.Element {\n        if (this.props.value === \"\") {\n            return <JSONInput\n                    locale={locale}\n                    onChange={\n                        this.props.valueChanger === undefined ?\n                            null :\n                            (e: any) => this.props.valueChanger(e.plainText)\n                    }\n                    colors={{\n                        background: \"#414141\"\n                    }}\n                    width={\"100%\"}\n                    height={\"100%\"}\n                    style={{\n                        outerBox: {\n                            borderRadius: \"10px\",\n                            overflow: \"hidden\"\n                        }\n                    }}\n                />;\n        } else {\n            return <JSONInput\n                    locale={locale}\n                    placeholder={JSON.parse(this.props.value as string)}\n                    viewOnly={true}\n                    onChange={\n                        this.props.valueChanger === undefined ?\n                            null :\n                            (e: any) => this.props.valueChanger(e.plainText)\n                    }\n                    colors={{\n                        background: \"#414141\"\n                    }}\n                    width={\"100%\"}\n                    height={\"100%\"}\n                    style={{\n                        outerBox: {\n                            borderRadius: \"10px\",\n                            overflow: \"hidden\"\n                        }\n                    }}\n                />\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"io-card\">\n                {\n                    this.props.heading === \"Input:\" ? (\n                        <div className=\"heading-flex\">\n                            <h1>{this.props.heading}</h1>\n                            <button\n                                onClick={() => {\n                                    if (this.props.sender !== undefined) {\n                                        this.props.sender();\n                                    } else {\n                                        ReactDOM.render(\n                                            <Snackbar message={\"Error while calling message sender\"} color={\"#CB1212\"}/>,\n                                            document.getElementById(\"snackbar\")\n                                        );\n                                    }\n                                }}\n                            >Send</button>\n                        </div>\n                    ) : (\n                        <h1>{this.props.heading}</h1>\n                    )\n                }\n                <select size={1} onChange={\n                    (e: any) => this.setState({inputType: e.target.value})\n                }>\n                    <option>JSON</option>\n                    <option>TEXT</option>\n                </select>\n                {\n                    this.state.inputType === \"JSON\" ?\n                    this.getJSONInput() : (\n                            <textarea\n                                className=\"text-input\"\n                                onChange={(e: any) => this.props.valueChanger(e.target.value)}\n                                value={(this.props.value as any) === \"\" ? undefined : this.props.value as any}\n                            />\n                    )\n                }\n            </div>\n        );\n    }\n}\n","import {w3cwebsocket} from \"websocket\";\n\nexport class Websocket {\n\n    websocket: w3cwebsocket | undefined;\n\n\n    constructor(url: string, errorHandler: any) {\n        if (this.URLChecker(url)) {\n            this.websocket = new w3cwebsocket(url);\n            this.websocket.onerror = errorHandler;\n        } else {\n            this.websocket = undefined;\n            errorHandler({\n               name: \"Invalid websocket URL\",\n               message: \"\"\n            });\n        }\n    }\n\n    // Checks weather the websocket url is valid or not.\n    private URLChecker(url: string): boolean {\n        if (url.includes(\"wss://\") || url.includes(\"ws://\")) {\n            return !(url.includes(\"wss://\") && url.includes(\"ws://\"));\n        }\n        return false;\n    }\n\n    sendMessage(msg: string): void {\n        if (this.websocket !== undefined) {\n            this.websocket.send(msg);\n        }\n    }\n}\n","import React, {ChangeEvent} from \"react\";\nimport \"./App.css\";\nimport {IOCard} from \"./components/IO-Card\";\nimport {AppState} from \"../typings/App\";\nimport {Websocket} from \"./services/Websocket\";\nimport {IMessageEvent} from \"websocket\";\nimport ReactDOM from \"react-dom\";\nimport {Snackbar} from \"./components/Snackbar\";\n\nexport default class App extends React.Component<any, AppState> {\n\n    state: AppState = {\n        inputText: \"\",\n        outputText: \"\",\n        url: \"\",\n        connected: false\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.changeInputValue = this.changeInputValue.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.messageReciver = this.messageReciver.bind(this);\n        this.errorHandler = this.errorHandler.bind(this);\n    }\n\n    // handles all errors coming from the websocket,\n    // by showing a snackbar of the error message\n    errorHandler(err: any): void {\n        if (err.currentTarget !== undefined && err.currentTarget.readyState === 3) {\n            ReactDOM.render(\n                <Snackbar message={\"Cannot open websocket on \" + err.currentTarget.url} color={\"#CB1212\"}/>,\n                document.getElementById(\"snackbar\")\n            );\n            return;\n        }\n        ReactDOM.render(\n            <Snackbar message={err.name} color={\"#CB1212\"}/>,\n            document.getElementById(\"snackbar\")\n        );\n    }\n\n    // Handles the message traffic coming from\n    // the active websocket connection.\n    messageReciver(event: IMessageEvent): void {\n        this.setState({outputText: event.data as string});\n    }\n\n    // Opens an connection an calls itself recursively every 5ms\n    // if the connection is not completely established.\n    openConnection(waiting: boolean = false, ws: Websocket | undefined = undefined): void {\n        if (!waiting) {\n            let ws = new Websocket(this.state.url, this.errorHandler);\n            if (ws.websocket === undefined) {\n                return;\n            }\n            ws.websocket.onmessage = this.messageReciver;\n            setTimeout(() => {\n                this.openConnection(true, ws);\n            }, 5);\n        } else {\n            if (ws?.websocket !== undefined) {\n                if (ws && ws?.websocket.readyState === 1) {\n                    this.setState({websocket: ws as Websocket, connected: true});\n                } else {\n                    setTimeout(() => {\n                        this.openConnection(true, ws);\n                    }, 5);\n                }\n            }\n        }\n    }\n\n    // Closes the active websocket connection\n    closeConnection(): void {\n        // @ts-ignore\n        this.state.websocket?.websocket.close();\n        this.setState({connected: false});\n    }\n\n    // This method is given to children components\n    // for changing the input values in this component.\n    changeInputValue(val: string): void {\n        this.setState({inputText: val});\n    }\n\n    // Handles the process of sending messages\n    // trough the active websocket connection\n    sendMessage(): void {\n        if (this.state.websocket === undefined){\n            ReactDOM.render(\n                <Snackbar message={\"No active websocket connection\"} color={\"#CB1212\"}/>,\n                document.getElementById(\"snackbar\")\n            );\n        } else {\n            (this.state.websocket as Websocket).sendMessage(this.state.inputText);\n        }\n    }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"url-input\">\n          <input type=\"text\" placeholder=\"websocket url\" onChange={\n              (e: ChangeEvent<HTMLInputElement>) => this.setState({url: e.target.value})\n          } />\n          <button\n              onClick={\n                  this.state.connected ? () => this.closeConnection() : () => this.openConnection()\n              }\n              style={{\n                  background: this.state.connected ? \"#c91919\" : \"#241688\",\n                  borderColor: this.state.connected ? \"#9a1313\" : \"#342888\"\n              }}\n          >\n              {this.state.connected ? \"close\" : \"open\"}\n          </button>\n        </div>\n        <div className=\"card-box\">\n            <IOCard\n                heading=\"Input:\"\n                value={\"\"}\n                valueChanger={this.changeInputValue}\n                sender={this.sendMessage}\n            />\n            <IOCard heading=\"Output:\" value={this.state.outputText} />\n        </div>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}